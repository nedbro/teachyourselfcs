
(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
                (accumulate combiner (term a) term (next a) next b)))
  )


(define (filtered-accumulate combiner null-value term a next b filter)
  (if (filter a b)
      null-value
      (combiner (term a)
                (accumulate combiner (term a) term (next a) next b)))
  )

(define (product fn a next b)
  (filtered-accumulate (lambda (x y) (* x y)) 1 fn a next b (lambda (x y) (> x y))))

(define (pi-approx approx)
  (* 4 (product (lambda (x)
                  (if (even? x)
                      (/ x (+ x 1.0))
                      (/ (+ x 1.0) x))
                  )
                2
                (lambda (x) (+ x 1))
                approx)))

(pi-approx 5000)